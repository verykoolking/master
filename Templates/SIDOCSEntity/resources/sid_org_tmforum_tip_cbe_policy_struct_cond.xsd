<?xml version="1.0" encoding="UTF-8"?><!--
 *  Generated with Tigerstripe Workbench 0.7.0.201207021234 and 
 *  Plugin Nortel Networks, Hewlett-Packard Company, Optare Solutions/TIP_Soap_Generator(1.2) (1.2)
 *
 *  DO NOT EDIT THIS CODE WHICH WAS AUTOMATICALLY GENERATED
--><!--
Copyright (C) TeleManagement Forum 2012. All Rights Reserved.

This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published, and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this section are included on all such copies and derivative works. However, this document itself may not be modified in any way, including by removing the copyright notice or references to TM FORUM, except as needed for the purpose of developing any document or deliverable produced by a TM FORUM Collaboration Project Team (in which case the rules applicable to copyrights, as set forth in the TM FORUM IPR Policy, must be followed) or as required to translate it into languages other than English.

The limited permissions granted above are perpetual and will not be revoked by TM FORUM or its successors or assigns. 

This document and the information contained herein is provided on an "AS IS" basis and TM FORUM DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. 


Direct inquiries to the TM Forum office: 
 
240 Headquarters Plaza,
East Tower - 10th Floor,
Morristown, NJ  07960 USA
Tel No.  +1 973 944 5100
Fax No.  +1 973 944 5110
TM Forum Web Page: www.tmforum.org
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.tmforum.org/xml/sid/org/tmforum/tip/cbe/policy/struct/cond" xmlns:fmk="http://www.tmforum.org/xml/sid/org/tmforum/tip/cbe/policy/fmk" xmlns:stat="http://www.tmforum.org/xml/sid/org/tmforum/tip/cbe/policy/struct/stat" xmlns:entity="http://www.tmforum.org/xml/tip/internal/entity" xmlns:fmkspec="http://www.tmforum.org/xml/sid/org/tmforum/tip/cbe/policy/fmkspec" targetNamespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/cbe/policy/struct/cond" attributeFormDefault="unqualified" elementFormDefault="qualified" version="13.0">
   <xsd:annotation>
      <xsd:documentation>
         <pre>TMF XML Schema Definitions from Tigerstripe model
                      project name: SID_Model
                        at version: 13.0
      for all artifacts in package: org.tmforum.tip.cbe.policy.struct.cond
      Model Description:
      Model Project for SID xsd generation
      Package Description:
      
      Package data summary information:
            entities: 3
 Association Classes: 2
           datatypes: 0
        enumerations: 0
              events: 0
          exceptions: 0
      </pre>
      </xsd:documentation>
   </xsd:annotation>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/cbe/policy/fmk" schemaLocation="sid_org_tmforum_tip_cbe_policy_fmk.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/cbe/policy/struct/stat" schemaLocation="sid_org_tmforum_tip_cbe_policy_struct_stat.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/tip/internal/entity" schemaLocation="internal_entity.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/cbe/policy/fmkspec" schemaLocation="sid_org_tmforum_tip_cbe_policy_fmkspec.xsd"/><!-- ******************************* --><!-- Package Enumeration definitions --><!-- ******************************* --><!-- **************************** --><!-- Package Datatype definitions --><!-- **************************** --><!-- ************************** --><!-- package Entity definitions --><!-- ************************** -->
   <xsd:element name="policyCondition" type="tns:PolicyCondition"/>
   <xsd:complexType name="PolicyCondition" abstract="true">
      <xsd:annotation>
         <xsd:documentation>
            <p>This is an abstract base class that represents how to form the condition clause of a PolicyRule. This class can be used to represent rule-specific or reusable policy conditions.

Policy conditions are of the form:

{variable, operator, value}

where the operator is usually the MATCH operator, but could be another type (e.g., compare) of operator. This gives the semantics of "IF the condition is TRUE (or FALSE)".

The subclasses of PolicyCondition, along with its recursive aggregation, enable simple and compound (e.g., nested) PolicyConditions to be supported by the same structure.</p>
            <p>This entity  is  abstract</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence>
               <xsd:element name="policyConditionSpec" type="fmkspec:PolicyConditionSpec" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity 0..1</p>
                        <p>This association end  has  aggregation shared</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association SpecifiesPolicyCondition</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="policyCondition" type="tns:ArrayOfPolicyCondition" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity *</p>
                        <p>This association end  has  aggregation none</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association ContainedPolicyConditionDetails</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="policyCondition1" type="tns:PolicyCondition" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity 0..1</p>
                        <p>This association end  has  aggregation shared</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association ContainedPolicyConditionDetails</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="policyRuleBase" type="fmk:ArrayOfPolicyRuleBase" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity *</p>
                        <p>This association end  has  aggregation shared</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  ordered</p>
                        <p>This association end  is  an end of association PolicyConditionRuleDetails</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfPolicyCondition">
      <xsd:sequence>
         <xsd:element name="item" type="tns:PolicyCondition" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="policyConditionAtomic" type="tns:PolicyConditionAtomic"/>
   <xsd:complexType name="PolicyConditionAtomic">
      <xsd:annotation>
         <xsd:documentation>
            <p>This is the base class for all simple policy conditions. A simple policy condition consists of a single Boolean clause, which is used to test a single condition. This consists of a single occurrence of a PolicyStatement, which is of the form:

{variable, operator, value}

This design relies on the PolicyStatement to supply the actual terms to make up the condition clause. Thus, since everything is normalized to a condition clause, no subclasses of PolicyConditionAtomic are needed. Instead, subclasses of the appropriate PolicyStatement classes are provided.

A compound PolicyCondition consists of one or more PolicyConditions contained inside a higher-level PolicyCondition. These can optionally be grouped by a PolicyConditionComposite object if desired.</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence>
               <xsd:element name="hasSubConditions" type="xsd:boolean" minOccurs="0" maxOccurs="1" default="false">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p>This is a Boolean attribute that, if TRUE, signifies that this PolicyCondition has one or more sub-conditions. Sub-conditions are used to enforce a hierarchical nesting of conditions, so that parent conditions may control the evaluation and other semantics of the sub-conditions that they contain.</p>
                        <p>This element is generated from an attribute.</p>
                        <p>This attribute  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="hasEvaluated" type="xsd:int" minOccurs="0" maxOccurs="1" default="0">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p>This is an enumerated integer that is set by a policy application to define the state of evaluation of this PolicyCondition. Values include:

0: not yet evaluated
1: evaluated as TRUE
2: evaluated as FALSE</p>
                        <p>This element is generated from an attribute.</p>
                        <p>This attribute  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="conditionSequenceNumber" type="xsd:int" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p>This attribute is a non-negative integer and represents the particular sequence in which this element is parsed as part of the overall policy structure.</p>
                        <p>This element is generated from an attribute.</p>
                        <p>This attribute  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="policyStatement" type="stat:PolicyStatement" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity 0..1</p>
                        <p>This association end  has  aggregation none</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association PolicyStatementInPolicyCondition</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfPolicyConditionAtomic">
      <xsd:sequence>
         <xsd:element name="item" type="tns:PolicyConditionAtomic" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="policyConditionComposite" type="tns:PolicyConditionComposite"/>
   <xsd:complexType name="PolicyConditionComposite">
      <xsd:annotation>
         <xsd:documentation>
            <p>The PolicyConditionComposite class is designed to be an intelligent container. The PolicyConditionComposite class is the base class for all complex policy conditions. A complex policy condition consists of an aggregation of PolicyConditionAtomic and/or PolicyConditionComposite objects, which in turn form a complex Boolean statement. It is important to note that such an object still evaluates to a single Boolean TRUE or FALSE value.

Conceptually, this is a stand-alone object that consists of one PolicyCondition that provides an overall context for either a nested or a group of subordinate PolicyConditions to be evaluated.</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence>
               <xsd:element name="conditionIsCNF" type="xsd:boolean" minOccurs="0" maxOccurs="1" default="true">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p>This is a Boolean attribute that, if TRUE, defines the condition clause of this PolicyConditionComposite object to be represented in Conjunctive Normal Form (e.g., an And of Ors). If the value of this attribute is FALSE, then the condition clause will be represented in Disjunctive Normal Form.

This attribute controls the setting of how multiple condition clauses (as represented by individual PolicyConditionAtomic objects) are treated in the PolicyConditionComposite object. As such, it is different from the attribute PolicyRule.IsCNF, which controls how multiple PolicyConditionComposite objects are treated in a PolicyRule object.</p>
                        <p>This element is generated from an attribute.</p>
                        <p>This attribute  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfPolicyConditionComposite">
      <xsd:sequence>
         <xsd:element name="item" type="tns:PolicyConditionComposite" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType><!-- ************************************* --><!-- Package Association Class definitions --><!-- ************************************* -->
   <xsd:element name="containedPolicyConditionDetails" type="tns:ContainedPolicyConditionDetails"/>
   <xsd:complexType name="ContainedPolicyConditionDetails">
      <xsd:annotation>
         <xsd:documentation>
            <p>This is a class that implements the semantics needed for the PolicyConditionInPolicyCondition aggregation. This aggregation defines the set of PolicyConditions that are contained in this PolicyCondition.

Note that the ContainedPolicyConditionDetails class and the PolicyConditionRuleDetails class have conceptually the same attributes. This is because they both provide semantics to form a condition expression. The difference lies in their placement relative to the PolicyRule class. That is, the ContainedPolicyConditionDetails class is used to combine individual expressions within a condition clause, whereas the PolicyConditionRuleDetails class is used to describe how the completed condition clause appears to the PolicyRule. These attributes are described in the Data Dictionary section of this Addendum.
This aggregation is used for two distinct purposes. First, it is used to gather together discrete PolicyConditions to form a PolicyCondition clause. In this usage, the set of individual PolicyConditionAtomic objects are aggregated by a PolicyConditionComposite object.

The second use is to form compound PolicyConditions. In this case, the PolicyConditionAtomic object aggregates PolicyConditionAtomic and/or PolicyConditionComposite objects. The former provides a simple nested PolicyCondition, while the latter provides structure for grouping the sub-conditions that are dependent on a higher-level condition.</p>
            <p>This association class  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:sequence>
         <xsd:element name="containedConditionIsNegated" type="xsd:boolean" minOccurs="0" maxOccurs="1" default="false">
            <xsd:annotation>
               <xsd:documentation>
                  <p>This is a Boolean attribute that, if TRUE, signifies that this condition term is negated. The default value for this attribute is FALSE.</p>
                  <p>This element is generated from an attribute.</p>
                  <p>This attribute  is  optional</p>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:element>
         <xsd:element name="containedConditionGroupNumber" type="xsd:int" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
               <xsd:documentation>
                  <p>This attribute is used to define the group to which the condition is a part of. It corresponds logical to the position of parentheses used to group condition terms together.</p>
                  <p>This element is generated from an attribute.</p>
                  <p>This attribute  is  optional</p>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:element>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfContainedPolicyConditionDetails">
      <xsd:sequence>
         <xsd:element name="item" type="tns:ContainedPolicyConditionDetails" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="policyConditionRuleDetails" type="tns:PolicyConditionRuleDetails"/>
   <xsd:complexType name="PolicyConditionRuleDetails">
      <xsd:annotation>
         <xsd:documentation>
            <p>This is a class that implements the semantics needed for the PolicyConditionInPolicyRule aggregation. This aggregation defines the set of PolicyConditions that are contained in this PolicyRule.

Note that the ContainedPolicyConditionDetails class and the PolicyConditionRuleDetails class have conceptually the same attributes. This is because they both provide semantics to form a condition expression. The difference lies in their placement relative to the PolicyRule class. That is, the ContainedPolicyConditionDetails class is used to combine individual expressions within a condition clause, whereas the PolicyConditionRuleDetails class is used to describe how the completed condition clause appears to the PolicyRule. These attributes are described in the Data Dictionary section of this Addendum.</p>
            <p>This association class  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:sequence>
         <xsd:element name="isNegated" type="xsd:boolean" minOccurs="0" maxOccurs="1" default="false">
            <xsd:annotation>
               <xsd:documentation>
                  <p>This is a Boolean attribute that, if TRUE, signifies that this condition is negated. The default value for this attribute is FALSE.</p>
                  <p>This element is generated from an attribute.</p>
                  <p>This attribute  is  optional</p>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:element>
         <xsd:element name="groupNumber" type="xsd:int" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
               <xsd:documentation>
                  <p>This attribute is used to define the group to which the condition is a part of. It corresponds logical to the position of parentheses used to group condition terms together.</p>
                  <p>This element is generated from an attribute.</p>
                  <p>This attribute  is  optional</p>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:element>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfPolicyConditionRuleDetails">
      <xsd:sequence>
         <xsd:element name="item" type="tns:PolicyConditionRuleDetails" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType><!-- ************************** --><!-- package Event definitions --><!-- ************************** --><!-- ************************** --><!-- package Exception definitions --><!-- ************************** -->
</xsd:schema>