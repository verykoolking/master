<?xml version="1.0" encoding="UTF-8"?><!--
 *  Generated with Tigerstripe Workbench 0.7.0.201207021234 and 
 *  Plugin Nortel Networks, Hewlett-Packard Company, Optare Solutions/TIP_Soap_Generator(1.2) (1.2)
 *
 *  DO NOT EDIT THIS CODE WHICH WAS AUTOMATICALLY GENERATED
--><!--
Copyright (C) TeleManagement Forum 2012. All Rights Reserved.

This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published, and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this section are included on all such copies and derivative works. However, this document itself may not be modified in any way, including by removing the copyright notice or references to TM FORUM, except as needed for the purpose of developing any document or deliverable produced by a TM FORUM Collaboration Project Team (in which case the rules applicable to copyrights, as set forth in the TM FORUM IPR Policy, must be followed) or as required to translate it into languages other than English.

The limited permissions granted above are perpetual and will not be revoked by TM FORUM or its successors or assigns. 

This document and the information contained herein is provided on an "AS IS" basis and TM FORUM DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. 


Direct inquiries to the TM Forum office: 
 
240 Headquarters Plaza,
East Tower - 10th Floor,
Morristown, NJ  07960 USA
Tel No.  +1 973 944 5100
Fax No.  +1 973 944 5110
TM Forum Web Page: www.tmforum.org
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/serv/rfs" xmlns:itf="http://www.tmforum.org/xml/sid/org/tmforum/tip/resource/res/log/itf" xmlns:rfs="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/spec/rfs" xmlns:cfs="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/serv/cfs" xmlns:catalog="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/spec/catalog" xmlns:role="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/serv/rfs/role" xmlns:proto="http://www.tmforum.org/xml/sid/org/tmforum/tip/resource/res/log/proto" xmlns:entity="http://www.tmforum.org/xml/tip/internal/entity" targetNamespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/serv/rfs" attributeFormDefault="unqualified" elementFormDefault="qualified" version="13.0">
   <xsd:annotation>
      <xsd:documentation>
         <pre>TMF XML Schema Definitions from Tigerstripe model
                      project name: SID_Model
                        at version: 13.0
      for all artifacts in package: org.tmforum.tip.service.serv.rfs
      Model Description:
      Model Project for SID xsd generation
      Package Description:
      The Service ABE contains entities that are used to represent two fundamentally different types of Services, called CustomerFacingServices and ResourceFacingServices.

A CustomerFacingService defines the characteristics and behavior of a particular Service as seen by the Customer or other appropriate PartyRole. In contrast, a ResourceFacingService is an abstraction that defines the characteristics and behavior of a particular Service that is not directly seen or purchased by the PartyRole. ResourceFacingServices are "internal" Services that are required to support a CustomerFacingService.

Entities in this ABE provide different views to examine, analyze, configure, monitor and repair Services of all types. Entities in this ABE are derived from Service Specification entities.
      Package data summary information:
            entities: 9
 Association Classes: 1
           datatypes: 0
        enumerations: 0
              events: 0
          exceptions: 0
      </pre>
      </xsd:documentation>
   </xsd:annotation>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/resource/res/log/itf" schemaLocation="sid_org_tmforum_tip_resource_res_log_itf.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/spec/rfs" schemaLocation="sid_org_tmforum_tip_service_spec_rfs.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/serv/cfs" schemaLocation="sid_org_tmforum_tip_service_serv_cfs.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/spec/catalog" schemaLocation="sid_org_tmforum_tip_service_spec_catalog.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/service/serv/rfs/role" schemaLocation="sid_org_tmforum_tip_service_serv_rfs_role.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/sid/org/tmforum/tip/resource/res/log/proto" schemaLocation="sid_org_tmforum_tip_resource_res_log_proto.xsd"/>
   <xsd:import namespace="http://www.tmforum.org/xml/tip/internal/entity" schemaLocation="internal_entity.xsd"/><!-- ******************************* --><!-- Package Enumeration definitions --><!-- ******************************* --><!-- **************************** --><!-- Package Datatype definitions --><!-- **************************** --><!-- ************************** --><!-- package Entity definitions --><!-- ************************** -->
   <xsd:element name="bandwidthService" type="tns:BandwidthService"/>
   <xsd:complexType name="BandwidthService">
      <xsd:annotation>
         <xsd:documentation>
            <p>This class represents a generic specification for defining the characteristics of a Bandwidth Service. Such a Service could be part of a ResourceFacingService. For example, a Provider might have a 150M pipe that is being allocated to multiple customers, where each Customer gets a prescribed amount of bandwidth. This class is the base class for representing such features.

Please see the DEN-ng Service model for more details.</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence/>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfBandwidthService">
      <xsd:sequence>
         <xsd:element name="item" type="tns:BandwidthService" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="coS1Bundle" type="tns:CoS1Bundle"/>
   <xsd:complexType name="CoS1Bundle">
      <xsd:annotation>
         <xsd:documentation>
            <p>This class represents the Class of Service settings for a specific ServiceBundle. ServiceBundles are related to ServicePackages via the packageContainsServiceBundles aggregation. Thus, this enables different CoS settings to be associated with a ServicePackage, which is what the Customer buys.

This version of the DEN-ng Service model defines four exemplary subclasses of ServiceBundle for defining four different groups of Class of Service (CoS). The idea is to use each CoSBundle class to represent the Class of Service settings for a specific ServiceBundle. This enables different CoS settings to be associated with the different CustomerFacingServices that are defined by a particular ServicePackage, which is what the Customer buys. For example, CoS1 could be used for VoIP, CoS2 could be used for mission-critical applications, CoS3 could be used for all other applications that are not mission-critical but require better than best-effort delivery, and CoS4 could define best effort service delivery.

Please see the DEN-ng Service model for more details. In the DEN-ng white paper, this is asociated with high-performance QoS needed for applications such as VoIP.</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence/>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfCoS1Bundle">
      <xsd:sequence>
         <xsd:element name="item" type="tns:CoS1Bundle" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="coS2Bundle" type="tns:CoS2Bundle"/>
   <xsd:complexType name="CoS2Bundle">
      <xsd:annotation>
         <xsd:documentation>
            <p>This class represents the Class of Service settings for a specific ServiceBundle. ServiceBundles are related to ServicePackages via the packageContainsServiceBundles aggregation. Thus, this enables different CoS settings to be associated with a ServicePackage, which is what the Customer buys.

This version of the DEN-ng Service model defines four exemplary subclasses of ServiceBundle for defining four different groups of Class of Service (CoS). The idea is to use each CoSBundle class to represent the Class of Service settings for a specific ServiceBundle. This enables different CoS settings to be associated with the different CustomerFacingServices that are defined by a particular ServicePackage, which is what the Customer buys. For example, CoS1 could be used for VoIP, CoS2 could be used for mission-critical applications, CoS3 could be used for all other applications that are not mission-critical but require better than best-effort delivery, and CoS4 could define best effort service delivery.

Please see the DEN-ng Service model for more details. In the DEN-ng white paper, this is asociated with QoS needed for mission-critical non-voice applications such as SAP or ERP.</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence/>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfCoS2Bundle">
      <xsd:sequence>
         <xsd:element name="item" type="tns:CoS2Bundle" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="coS3Bundle" type="tns:CoS3Bundle"/>
   <xsd:complexType name="CoS3Bundle">
      <xsd:annotation>
         <xsd:documentation>
            <p>This class represents the Class of Service settings for a specific ServiceBundle. ServiceBundles are related to ServicePackages via the packageContainsServiceBundles aggregation. Thus, this enables different CoS settings to be associated with a ServicePackage, which is what the Customer buys.

This version of the DEN-ng Service model defines four exemplary subclasses of ServiceBundle for defining four different groups of Class of Service (CoS). The idea is to use each CoSBundle class to represent the Class of Service settings for a specific ServiceBundle. This enables different CoS settings to be associated with the different CustomerFacingServices that are defined by a particular ServicePackage, which is what the Customer buys. For example, CoS1 could be used for VoIP, CoS2 could be used for mission-critical applications, CoS3 could be used for all other applications that are not mission-critical but require better than best-effort delivery, and CoS4 could define best effort service delivery.

Please see the DEN-ng Service model for more details. In the DEN-ng white paper, this is asociated with QoS needed for applications that aren't mission critical, but require better than best effort delivery.</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence/>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfCoS3Bundle">
      <xsd:sequence>
         <xsd:element name="item" type="tns:CoS3Bundle" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="coS4Bundle" type="tns:CoS4Bundle"/>
   <xsd:complexType name="CoS4Bundle">
      <xsd:annotation>
         <xsd:documentation>
            <p>This class represents the Class of Service settings for a specific ServiceBundle. ServiceBundles are related to ServicePackages via the packageContainsServiceBundles aggregation. Thus, this enables different CoS settings to be associated with a ServicePackage, which is what the Customer buys.

This version of the DEN-ng Service model defines four exemplary subclasses of ServiceBundle for defining four different groups of Class of Service (CoS). The idea is to use each CoSBundle class to represent the Class of Service settings for a specific ServiceBundle. This enables different CoS settings to be associated with the different CustomerFacingServices that are defined by a particular ServicePackage, which is what the Customer buys. For example, CoS1 could be used for VoIP, CoS2 could be used for mission-critical applications, CoS3 could be used for all other applications that are not mission-critical but require better than best-effort delivery, and CoS4 could define best effort service delivery.

Please see the DEN-ng Service model for more details. In the DEN-ng white paper, this is asociated with applications that only require best-effort QoS.</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence/>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfCoS4Bundle">
      <xsd:sequence>
         <xsd:element name="item" type="tns:CoS4Bundle" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="resourceFacingService" type="tns:ResourceFacingService"/>
   <xsd:complexType name="ResourceFacingService" abstract="true">
      <xsd:annotation>
         <xsd:documentation>
            <p>This is an abstract base class for ResourceFacingServices. A ResourceFacingService is an abstraction that defines the characteristics and behavior of a particular Service that is not directly seen or purchased by the Customer. ResourceFacingServices are internal Services that are required to support a CustomerFacingService. The Customer obtains CustomerFacingServices via Products, and is not aware of the ResourceFacingServices which support the CustomerFacingService(s) that is being obtained directly by the Customer via a Product. For example, a VPN is an example of a CustomerFacingService. This particular type of VPN may require BGP to support it. Customers don't purchase BGP, and hopefully aren't even aware that BGP is running. Therefore, BGP is an example of a ResourceFacingService.



CustomerFacingServices are directly related to Products as well as to ResourceFacingServices. ResourceFacingServices are indirectly related to Products through the relationship between Product and Resource. This enforces the relationship to Products while keeping Services that are not directly obtainable via Products (i.e., ResourceFacingServices) separated from Products.</p>
            <p>This entity  is  abstract</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence>
               <xsd:element name="rfsStatus" type="xsd:int" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p>This is an enumerated integer that defines the status of this particular ResourceFacingService. Values include:

0: Operational and supporting CFS
1: Degraded but supporting CFS
2: In Violation and not supporting CFS
3: Operational but not yet supporting a CFS
4: Being Tested
5: Being Deployed
6: Failed

Value 0 means that this ResourceFacingService is acting per specification, and is also currently supporting one or more CustomerFacingServices.

Value 1 means that this ResourceFacingService is operational, but is currently in a degraded state. This degraded state indicates congestion or some other problem, but has not yet comprimised the operation of its associated CustomerFacingServices.

Value 2 means that this ResourceFacingService is operational, but is currently in violation of its associated specification(s). This in turn means that its associated CustomerFacingServices are violating their contractual specification(s) unless automatic fail-over has been enabled.

Value 3 means that this ResourceFacingService is acting per specification, but is not yet currently supporting one or more CustomerFacingServices.

Value 4 means that this ResourceFacingService is currently being tested, and is not yet ready to support a CustomerFacingService.

Value 5 means that this ResourceFacingService is currently being deployed, and is not yet ready to support a CustomerFacingService.

Value 6 means that this ResourceFacingService has currently failed. The set of actions that should be taken, as well as whether this service can still be billed or not, are determined by its associated Policy for handling service violations.</p>
                        <p>This element is generated from an attribute.</p>
                        <p>This attribute  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="deviceInterface" type="itf:DeviceInterface" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity 0..1</p>
                        <p>This association end  has  aggregation shared</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  unique</p>
                        <p>This association end  is  an end of association ServiceDeviceInterfaceDetails</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="customerFacingService" type="cfs:ArrayOfCustomerFacingService" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity *</p>
                        <p>This association end  has  aggregation shared</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association CFServiceRequiresRFServices</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="protocol" type="proto:ArrayOfProtocol" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity *</p>
                        <p>This association end  has  aggregation none</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association ProtocolServiceDetails</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="resourceFacingServiceComposite" type="tns:ResourceFacingServiceComposite" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity 0..1</p>
                        <p>This association end  has  aggregation shared</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association RFSCompositeHasRFServices</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="resourceFacingServiceRole" type="role:ArrayOfResourceFacingServiceRole" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity *</p>
                        <p>This association end  has  aggregation none</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association RFServiceHasRFSRoles</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="serviceCandidate" type="catalog:ArrayOfServiceCandidate" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity *</p>
                        <p>This association end  has  aggregation none</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  unique</p>
                        <p>This association end  is  an end of association ServiceCandidateToResourceFacingService</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="resourceFacingServiceSpec" type="rfs:ResourceFacingServiceSpec" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity 0..1</p>
                        <p>This association end  has  aggregation shared</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association SpecifiesResourceFacingService</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfResourceFacingService">
      <xsd:sequence>
         <xsd:element name="item" type="tns:ResourceFacingService" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="resourceFacingServiceAtomic" type="tns:ResourceFacingServiceAtomic"/>
   <xsd:complexType name="ResourceFacingServiceAtomic" abstract="true">
      <xsd:annotation>
         <xsd:documentation>
            <p>This is an abstract base class that defines a stand-alone ResourceFacingService that meets the needs of a particular CustomerFacingService. Stand-alone ResourceFacingServices may be linked directly to a CustomerFacingService or aggregated by a ResourceFacingServiceComposite.</p>
            <p>This entity  is  abstract</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence/>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfResourceFacingServiceAtomic">
      <xsd:sequence>
         <xsd:element name="item" type="tns:ResourceFacingServiceAtomic" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="resourceFacingServiceComposite" type="tns:ResourceFacingServiceComposite"/>
   <xsd:complexType name="ResourceFacingServiceComposite" abstract="true">
      <xsd:annotation>
         <xsd:documentation>
            <p>This is an abstract base class that defines an integrated set of ResourceFacingServices that collectively meets the needs of a CustomerFacingService. For example, the Customer may have requested "GoldService", which is a ServicePackage that defines a set of ServiceBundles, each of which has its own QoS. A set of ResourceFacingServiceProducts can then be defined, one for each different ServiceBundle instance, that provides the required QoS for each ServiceBundle instance.

Please see the DEN-ng Service Model whitepaper for more information and examples.</p>
            <p>This entity  is  abstract</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence>
               <xsd:element name="resourceFacingService" type="tns:ArrayOfResourceFacingService" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity *</p>
                        <p>This association end  has  aggregation none</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association RFSCompositeHasRFServices</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfResourceFacingServiceComposite">
      <xsd:sequence>
         <xsd:element name="item" type="tns:ResourceFacingServiceComposite" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:element name="serviceBundle" type="tns:ServiceBundle"/>
   <xsd:complexType name="ServiceBundle" abstract="true">
      <xsd:annotation>
         <xsd:documentation>
            <p>Conceptually, a ServiceBundle is thought of as a collection of ResourceFacingServiceSpecifications. This enables the needs of different sets of ResourceFacingServiceSpecifications to be grouped together, hence, the name "bundle". Since these are ResoureFacingSpecifications, they define reusable templates for implementing the ResourceFacingServices that are required by a particular CustomerFacingService (as represented by a ServicePackage).



ServiceBundles were designed to define a set of Class of Service specifications that were required by a CustomerFacingService to work together. A ServicePackage is the entity that models the requirements of the CustomerFacingService. Thus, ServicePackages can specify different packaging of CustomerFacingServices that are obtained by a Customer via a Product, and ServiceBundles specify the set of ResourceFacingServices that each CustomerFacingService requires.



ServiceBundles are a natural way to implement the requirements of a ServicePackage, and are related to a ServicePackage through the ServicePackageUsesServiceBundles aggregation.</p>
            <p>This entity  is  abstract</p>
            <p>This entity  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="entity:EntityBase">
            <xsd:sequence>
               <xsd:element name="hasMultipleQoSTypes" type="xsd:boolean" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p>This is a Boolean attribute that, if TRUE, defines this ServiceBundle as containing more than a single type of QoSService (e.g., DiffServ and 802.1P as an example).</p>
                        <p>This element is generated from an attribute.</p>
                        <p>This attribute  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="servicePackage" type="cfs:ArrayOfServicePackage" minOccurs="0" maxOccurs="1">
                  <xsd:annotation>
                     <xsd:documentation>
                        <p/>
                        <p>This element is generated from an association end.</p>
                        <p>This association end  has  multiplicity *</p>
                        <p>This association end  has  aggregation shared</p>
                        <p>This association end  is  navigable</p>
                        <p>This association end  is  an end of association ServicePackageUsesServiceBundles</p>
                        <p>This association end  is  optional</p>
                     </xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfServiceBundle">
      <xsd:sequence>
         <xsd:element name="item" type="tns:ServiceBundle" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType><!-- ************************************* --><!-- Package Association Class definitions --><!-- ************************************* -->
   <xsd:element name="protocolServiceDetails" type="tns:ProtocolServiceDetails"/>
   <xsd:complexType name="ProtocolServiceDetails">
      <xsd:annotation>
         <xsd:documentation>
            <p>This class captures the semantics of the rfServiceUsesProtocol aggregation.

The attributes of this class are currently TBD.
This aggregation defines the set of Protocols that are required by a particular ResourceFacingService. The semantics associated with how a given Protocol is used by a particular ResourceFacingService is defined by the ProtocolServiceDetails aggregation class.</p>
            <p>This association class  is  optional</p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:sequence/>
   </xsd:complexType>
   <xsd:complexType name="ArrayOfProtocolServiceDetails">
      <xsd:sequence>
         <xsd:element name="item" type="tns:ProtocolServiceDetails" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
   </xsd:complexType><!-- ************************** --><!-- package Event definitions --><!-- ************************** --><!-- ************************** --><!-- package Exception definitions --><!-- ************************** -->
</xsd:schema>