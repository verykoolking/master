<?xml version="1.0" encoding="UTF-8" ?>
<script name="cm_aaca.addBranchToTree">
  <group>RatingTree</group>
  <label>addBranchToTree</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="RTree" type="rifp">
      <mandatory>true</mandatory>
      <type>dstruct_cm_aaca.NodoDecision</type>
    </parameter>
    <parameter name="branch" type="rifp">
      <mandatory>true</mandatory>
      <type>dstruct_cm_spoc.data.RatingTreeBranch</type>
    </parameter>
    <parameter name="defaultTariffClasses" type="rifp">
      <array>true</array>
      <mandatory>true</mandatory>
      <type>dstruct_cm_spoc.data.DefaultTariffClassPerNode</type>
    </parameter>
  </parameterList>
  <valueType>dstruct_cm_aaca.NodoDecision</valueType>
  <script><![CDATA[
    try{
        var tariffClass;
        var nodes = branch.RTBRTNodeOutputArrDS.ListDS;
        var branchTariffClass = cm_aaca.getSpecificationByCode(branch.TariffClass, new cm_spoc.data.TariffClass());

        if(!RTree){    //an empty tree
            tariffClass = cm_aaca.getSpecificationByCode(cm_aaca.getDefaultTariffClassForNode(nodes[0].NodeName, defaultTariffClasses) , new cm_spoc.data.TariffClass());
            RTree = cm_aaca.createDecisionNode(nodes[0].NodeName, tariffClass.TariffClassCode);
        }

        if(nodes[0].NodeName != RTree.Name)
            return api_common.createFault("ERR", "Wrong RatingTree structure. The top level nodes in the branches must be the same!");

        var parentNode = RTree;
        var nodeOutput, nextNode;
        for(var i=0; i<nodes.length - 1; i++){
            nodeOutput = cm_aaca.getNodeOutput(nodes[i]);
            nextNode = cm_aaca.getDecisionNodeByNodeOutput(parentNode, nodeOutput, nodes[i+1].NodeName);
            if(!nextNode){
                tariffClass = cm_aaca.getSpecificationByCode(cm_aaca.getDefaultTariffClassForNode(nodes[i+1].NodeName, defaultTariffClasses) , new cm_spoc.data.TariffClass());
                nextNode = cm_aaca.createDecisionNode(nodes[i+1].NodeName, tariffClass.TariffClassCode, nodeOutput);
                parentNode.NodoDecision[parentNode.NodoDecision.length] = nextNode;
            }
            parentNode = nextNode;
        }

        //now we create the terminal node
        nodeOutput = cm_aaca.getNodeOutput(nodes[nodes.length - 1]);
        parentNode.NodoDecision[parentNode.NodoDecision.length] = cm_aaca.createTerminalNode(branchTariffClass.TariffClassCode, nodeOutput);

        return RTree;

    }catch(exp){
        return api_common.createException(exp, "ERR");
    }
  ]]></script>
</script>