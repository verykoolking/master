<?xml version="1.0" encoding="UTF-8" ?>
<script name="cm_pws.services.inOut_queryEntityStatus">
  <highlight>32</highlight>
  <label>inOut_queryEntityStatus</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="input" type="rifp">
      <type>dstruct_OCSConfigurationOperation.v1.types.QueryEntityStatus</type>
    </parameter>
  </parameterList>
  <valueType>dstruct_OCSConfigurationOperation.v1.types.QueryEntityStatusResponse</valueType>
  <script><![CDATA[
    try {
        var OP_REFERENCE = 'QUERY_ENTITY_STATUS';

        var inputError = cm_pws.services.validateRequest(OP_REFERENCE, input);
        if(api_common.isFault(inputError)) {
            throw inputError;
        }

        var entity = input.oCSEntity;
        var queryCommonInfo = input.queryCommonInfo;
        var innerDS = cm_pws.getInnerDataStructure(input.oCSEntity);
        //validate the session
        if(!cm_pws.services.isEntityValidForOperation(innerDS)){
            var fault = api_common.createFault("E102", "Operation is not allowed for this type of entity.");    //TODO: correct code
            return fault;
        }
        var response = cm_pws.services.validateEntity(innerDS);
        if(api_common.isFault(response[0]))
            return response[0];

        // Values for result pagination:
        var paginationFrom  = 0;
        var paginationTo    = 0;

        var token    = queryCommonInfo.token;
        var numRegs  = queryCommonInfo.numRegs;

        // Validate token:
        if(token && token != "") {
            // Parse the token ('TOKEN_RESULTS_[FROM]_[TO]')
            var pattern = "^TOKEN_RESULTS_[0-9]+_[0-9]+$";
            if(cm_common.matchRegularExpression(pattern, token)) {
                var sb = token.split("_");
                var lastPaginationTo = cm_pws.services.pwsValidation_PositiveNumber(sb[3]);
                paginationFrom = lastPaginationTo;
            }
            else {
                var fault = api_common.createFault("E111", "The token has an invalid value. Must match with 'TOKEN_RESULTS_[FROM]_[TO]'.");
                return fault;
            }
        }

        // Validate numRegs:
        if(numRegs && numRegs != "") {
            numRegs = cm_pws.services.pwsValidation_PositiveNumber(numRegs);
            if(api_common.isFault(numRegs)) {
                var fault = api_common.createFault("E111", "numRegs has an invalid value. Must be a positive number.");
                return fault;
            }
        }
        else {
            numRegs = cm_pws.services.pwsValidation_PositiveNumber(0);
        }

        var entityDs = cm_pws.getInnerDataStructure(entity);
        /*var entityDs = null;
        if(entity.oCSPriceEventType.identifier != null && entity.oCSPriceEventType.identifier.entityType != null)
            entityDs = entity.oCSPriceEventType;
        else if(entity.oCSComponentProdOfferPrice.identifier != null && entity.oCSComponentProdOfferPrice.identifier.entityType != null)
            entityDs = entity.oCSComponentProdOfferPrice;
        else if(entity.oCSProductOffering.identifier != null && entity.oCSProductOffering.identifier.entityType != null)
            entityDs = entity.oCSProductOffering;
        else if(entity.oCSBundledProductOffering.identifier != null && entity.oCSBundledProductOffering.identifier.entityType != null)
            entityDs = entity.oCSBundledProductOffering;
        else if(entity.oCSProductSpecification.identifier != null && entity.oCSProductSpecification.identifier.entityType != null)
            entityDs = entity.oCSProductSpecification;
        else if(entity.oCSCustomerFacingServiceSpec.identifier != null && entity.oCSCustomerFacingServiceSpec.identifier.entityType != null)
            entityDs = entity.oCSCustomerFacingServiceSpec;
        else if(entity.oCSProduct.identifier != null && entity.oCSProduct.identifier.entityType != null)
            entityDs = entity.oCSProduct;
        else if(entity.oCSComponentProdPrice.identifier != null && entity.oCSComponentProdPrice.identifier.entityType != null)
            entityDs = entity.oCSComponentProdPrice;
        else if(entity.oCSCustomerFacingService.identifier != null && entity.oCSCustomerFacingService.identifier.entityType != null)
            entityDs = entity.oCSCustomerFacingService;
        else {
            entityDs = api_common.createFault("E111", "Incorrect Entity Specification structure.");
            return entityDs;
        }*/

        // Query Specifications
        var itemCode = entityDs.identifier.dn.scheme;
        var search = new epc.data.SpecificationSearch();

        if(itemCode == null || "ALL" == itemCode.toUpperCase()) {
            search.specification.specificationCode = "";
        }
        else {
            search.specification.specificationCode = itemCode;
        }

        var queryResults = epc.querySpecification(search);
        if(api_common.isFault(queryResults)) {
            var fault = api_common.createFault("E111", "Error searching for Specifications.");
            return fault;
        }

        // Pagination variables:
        var maxResults = 0;
        if(queryResults && queryResults.specification) {
            maxResults = queryResults.specification.length;
        }



        if(maxResults > 0) {
            if(numRegs == 0) {
                paginationTo = maxResults - paginationFrom;
            }
            else {
                if(paginationFrom + numRegs > maxResults) {
                    paginationTo = maxResults;
                }
                else {
                    paginationTo = paginationFrom + numRegs;
                }
            }
        }

        // Create the method response:
        var output = new OCSConfigurationOperation.v1.types.QueryEntityStatusResponse();
        output.queryCommonInfoResult = new OCSConfigurationOperation.v1.types.QueryEntityStatus();

        // Map the Specifications to the Entity Structure:
        var arrayEntityStatus = new OCSEntity.v1.types.ArrayOfOCSEntityStatusType();
        var counter = 0;
        for(var i=paginationFrom; i<paginationTo; i++) {
            var entityStatusRegister = new OCSEntity.v1.types.OCSEntityStatusType();
            var spec = queryResults.specification[i];

            // Map the entity structure:
            var entity = new OCSEntity.v1.types.OCSEntityType();
            cm_pws.services.pwsMap_SpecificationToEntityDS(spec, entity);
            if(api_common.isFault(entity)) {
                var fault = api_common.createFault("E111", "Internal error while mapping Entity values.");
                return fault;
            }
            entityStatusRegister.oCSEntity = entity;

            var orderItemFinder = new Finder("cm_plm.plmOrderItemFinder");
            orderItemFinder.searchDocument.itemCode = itemCode;

            var result = orderItemFinder.search();
            if (result && result.length > 0)
                entityStatusRegister.entityStatus = result[0].itemStatus;
            else{
                var itemCat = theCatalog.getItem(itemCode);
                if(!itemCat.getItemEndDate())
                    entityStatusRegister.entityStatus = 'ACTIVE';
                else
                   entityStatusRegister.entityStatus = 'ARCHIVED';
            }

                // Map the entity status:
                //entityStatusRegister.entityStatus = spec.state;
            // Map the entity last state change date:
            entityStatusRegister.lastStateChangeDate = spec.startDate;    // TODO: correct field?

            arrayEntityStatus.oCSEntityStatus[counter] = entityStatusRegister;
            counter ++;
        }

        output.oCSEntityStatus = arrayEntityStatus;

        // Create de updated token to return:
        var returnedToken = new OCSOperation.v1.types.QueryCommonInfoType();
        returnedToken.token = "TOKEN_RESULTS_" + paginationFrom + "_" + paginationTo;
        output.queryCommonInfoResult = returnedToken;

        return output;
    }
    catch (exp)
    {
        var code = eval("arguments.callee.name");
        var fault = api_common.createException(exp, code);    //TODO: correct error code
        return fault;
    }
  ]]></script>
</script>