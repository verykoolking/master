<?xml version="1.0" encoding="UTF-8" ?>
<script name="cm_pws.services.validateEntity">
  <label>validateEntity</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="entity" type="rifp">
      <mandatory>true</mandatory>
      <type>dstruct_OCSEntity.v1.types.OCSEntityType</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    ///////////////////
    var errorList = entity.validate();
    if(errorList && errorList.length > 0){
        var fault = new api_common.data.fault();
        for(var i=0; i<errorList.length; i++)
            fault.addFault(errorList[i]);
        return fault;
    }
    ////////////////////
    if (!entity)
        return [api_common.createFault("E404", "The entity is null!"),false];    //TODO: provide the correct code

    var response;

    for(var i=0; i<entity.relations.relation.length; i++){
        response = checkDS(entity.relations.relation[i],false);
        if(api_common.isFault(response))
            return response;
    }


    var innerDS;

    switch(entity.metadataType){
        case "OCSEntity.v1.types:OCSComponentProdOfferPriceType":
        innerDS = entity.oCSProdOfferPriceCharacteristic;
        break;
        case "OCSEntity.v1.types:OCSProductOfferingType":
        innerDS = entity.oCSProductSpecCharValueUse;
        break;
        case "OCSEntity.v1.types:OCSProductSpecificationType":
        innerDS = entity.oCSProductSpecCharacteristic;
        break;
        default:
        return [api_common.createFault("E302", "The entity type is not ssupported!"),false];    //TODO: provide the correct code
    }

    var needToBeOrdered = false;
    for(var i=0; i<innerDS.complexCharacteristic.length; i++){
        response = checkDS(innerDS.complexCharacteristic[i],true);
        if(response && response.length>0)
        {
            if( api_common.isFault(response[0]))
                return response;
            else
            {
                if(response[1]==true)
                    needToBeOrdered = true;
            }
        }
    }


    //DS is valid.
    return [true,needToBeOrdered];

    //******************************************//
    //////////////////////////////////////////////
    function checkDS(DS,validatePosition){
        var hasItem = DS.individualItemUpdate ? DS.individualItemUpdate : false;

        if(hasItem && DS.item.length == 0)
            return [api_common.createFault("E304", "The item must be present for the entity."),false];    //TODO: provide the correct code

        var operation;
        var position;
        var prevPosition = -1;
        var needToBeOrdered = false;
        for(var i=0; i<DS.item.length; i++)
        {
            operation = DS.item[i].operation;
            if(hasItem && !(operation && operation.trim() != ""))
            {
                return [api_common.createFault("E304", "The operation must be present for the entity."),needToBeOrdered];    //TODO: provide the correct code
            }
            else
            {
                if(!hasItem && (operation && operation.trim() !=""))
                {
                    return [api_common.createFault("E305", "The item must NOT be present for the entity."),needToBeOrdered];    //TODO: provide the correct code
                }
                else
                {
                    if(validatePosition)
                    {
                        position =  DS.item[i].position;
                        if(position &&  position.trim() !="")
                        {
                            var evalValue = parseInt(position);
                            if(isNaN(evalValue))
                            {
                                return [api_common.createFault("E305", "The item must NOT be present for the entity."),needToBeOrdered];    //TODO: provide the correct code
                            }
                            else
                            {
                                if(!needToBeOrdered && prevPosition > position)
                                    needToBeOrdered = true;

                                prevPosition = position;
                            }
                        }
                    }
                }
            }
        }
        return [true,needToBeOrdered];
    }
  ]]></script>
</script>