<?xml version="1.0" encoding="UTF-8" ?>
<script name="cm_spoc.initWalletCommonConfiguration">
  <group>ui_scripts.Wallets</group>
  <label>initWalletCommonConfiguration</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="model" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    if(!model.specificationCode){
       /* model.BoltOnTypeCode = " ";
        var walletcommonconfiguration = cm_spoc.initInnerDS("base_WalletCommonConfiguration");
        model= walletcommonconfiguration;

        var wallet = cm_spoc.initInnerDS("base_Wallet");
        model.WalletDS= wallet;

       var itemFinder = new Finder("cm_spoc.DefaultWalletFinder");
       var result1 = itemFinder.search();


       itemFinder = new Finder("cm_spoc.DefaultWalletSosTopUpsFinder");
       var result2 = itemFinder.search();

        /*for(var i=0;i<result.length;i++){
            model.DefaultWalletEnum=result[i].itemCode;
            model.DefaultWalletSosTopUpsEnum=result[i].itemCode;
        }

        if(result.length>0){
           var btCode=result[0].itemCode;
           var btCode1=result[0].itemType;
           var btCode2=result[0].status;
           var btCode3=result[0].baseItemCode;
           var btCode4=result[0].projectRef;
           model.DefaultWalletEnum=btCode;
           /* model.BoltOnType=btCode;
           var btmJson = cm_spoc.getBoltOnTypeModality(btCode);
           model.BoltOnTypeModalityCode=btmJson.BoltOnTypeModalityCode;
           model.BoltOnTypeModalityDesc=btmJson.BoltOnTypeModalityDesc;
       }*/


        return model;
    }
    else{
       /*var s = new epc.data.Specification();
       s.project =  cwa_epc.getDefaultProj();


       s.specificationCode = model;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
           model=r;
       }
        s.specificationCode = model.WalletDS;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
           model.WalletDS=r;
       }
       /*
       s.specificationCode = model.BoltOnValueOffering;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
            model.BoltOnValueOfferingDS=r;
       }

       s.specificationCode = model.BoltOnValidityOffering;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
            model.BoltOnValidityOfferingDS=r;
       }

       s.specificationCode = model.BoltOnValidityOfferingDS.BoltOnValidityOfferingDates;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
            model.BoltOnValidityOfferingDS.BoltOnValidityOfferingDatesDS=r;
       }

       s.specificationCode = model.BoltOnValidityOfferingDS.BoltOnValidityOfferingTime;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
            model.BoltOnValidityOfferingDS.BoltOnValidityOfferingTimeDS=r;
       }

       s.specificationCode = model.BoltOnValidityOfferingDS.BoltOnValidityOfferingCal;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
            model.BoltOnValidityOfferingDS.BoltOnValidityOfferingCalDS=r;
       }

       s.specificationCode = model.SessionOffering;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
            model.SessionOfferingDS=r;
       }

       s.specificationCode = model.SubscriptionOffering;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
            model.SubscriptionOfferingDS=r;
       }


       /*var subsLimitsRel = model.SubscriptionOfferingDS.SubscriptionLimits;
       var subsLimitsDS=model.SubscriptionOfferingDS.SubscriptionLimitsDS;
       for(var i=0;i<subsLimitsRel.length;i++){
           s.specificationCode = subsLimitsRel[i];
           var r = epc.getSpecificationByKey(s);
           if(!api_common.isFault(r)){
               subsLimitsDS[i]=r;
               if(subsLimitsDS[i].NaturalPeriod==true) subsLimitsDS[i].PeriodTypeEnum="true";
               else subsLimitsDS[i].PeriodTypeEnum="false";
               if(subsLimitsDS[i].CountingOnlyActives==true) subsLimitsDS[i].ActivityFlagEnum="true";
               else subsLimitsDS[i].ActivityFlagEnum="false";
           }
       }

       s.specificationCode = model.SubscriptionOfferingDS.TemporalSubscriberActCond;
       var r = epc.getSpecificationByKey(s);
       if(!api_common.isFault(r)){
            model.SubscriptionOfferingDS.TemporalSubscriberActCondDS=r;
       }*/

       model.DefaultWalletEnum = model.DefaultWallet;
       model.DefaultWalletForSOSTopUpEnum = model.DefaultWalletForSOSTopUp;


    }

    return model;
  ]]></script>
</script>