CREATE OR REPLACE
PACKAGE NGAA_BOLTON_CONFIGURATION
AS
  PROCEDURE SET_BOLTON_SETTINGS(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_BOLTON_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_BOLTON_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_BOLTON_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE SET_BOLTON_MODALITY_PRIORITY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_BOLTON_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_BOLTON_CONFIGURATION
AS
PROCEDURE SET_BOLTON_SETTINGS(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END SET_BOLTON_SETTINGS;
PROCEDURE CREATE_BOLTON_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_BOLTON_TYPE;
PROCEDURE CHANGE_BOLTON_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_BOLTON_TYPE;
PROCEDURE DELETE_BOLTON_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_BOLTON_TYPE;
PROCEDURE SET_BOLTON_MODALITY_PRIORITY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END SET_BOLTON_MODALITY_PRIORITY;
END NGAA_BOLTON_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_WALLET_CONFIGURATION
AS
  PROCEDURE SET_WALLET(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_WALLET_USAGE_RULE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_WALLET_USAGE_RULE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_WALLET_USAGE_RULE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_CHARGING_MODE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_CHARGING_MODE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_CHARGING_MODE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_WALLET_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_WALLET_CONFIGURATION
AS
PROCEDURE SET_WALLET(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END SET_WALLET;
PROCEDURE CREATE_WALLET_USAGE_RULE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_WALLET_USAGE_RULE;
PROCEDURE CHANGE_WALLET_USAGE_RULE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_WALLET_USAGE_RULE ;
PROCEDURE DELETE_WALLET_USAGE_RULE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_WALLET_USAGE_RULE;
PROCEDURE CREATE_CHARGING_MODE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_CHARGING_MODE;
PROCEDURE CHANGE_CHARGING_MODE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_CHARGING_MODE;
PROCEDURE DELETE_CHARGING_MODE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_CHARGING_MODE;
END NGAA_WALLET_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_TOP_UP_CONFIGURATION
AS
END NGAA_TOP_UP_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_TOP_UP_CONFIGURATION
AS
END NGAA_TOP_UP_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_LIST_CONFIGURATION
AS
  PROCEDURE CREATE_LIST(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_LIST(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_LIST(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE SET_LIST_SETTINGS(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_LIST_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_LIST_CONFIGURATION
AS
PROCEDURE CREATE_LIST(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_LIST;
PROCEDURE CHANGE_LIST(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_LIST;
PROCEDURE DELETE_LIST(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_LIST;
PROCEDURE SET_LIST_SETTINGS(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END SET_LIST_SETTINGS;
END NGAA_LIST_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_TRIBE_CONFIGURATION
AS
  PROCEDURE CREATE_TRIBE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_TRIBE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_TRIBE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_CATEGORY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_CATEGORY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_CATEGORY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_TRIBE_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_TRIBE_CONFIGURATION
AS
PROCEDURE CREATE_TRIBE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_TRIBE;
PROCEDURE CHANGE_TRIBE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_TRIBE;
PROCEDURE DELETE_TRIBE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_TRIBE;
PROCEDURE CREATE_CATEGORY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_CATEGORY;
PROCEDURE CHANGE_CATEGORY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_CATEGORY;
PROCEDURE DELETE_CATEGORY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_CATEGORY;
END NGAA_TRIBE_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_CALENDAR_CONFIGURATION
AS
  PROCEDURE CREATE_WEEK_DAY_DEFINITION(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_WEEK_DAY_DEFINITION(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_WEEK_DAY_DEFINITION(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_SPECIAL_DAY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_SPECIAL_DAY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_SPECIAL_DAY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_TYPE_OF_DAY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_TYPE_OF_DAY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_TYPE_OF_DAY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_CALENDAR_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_CALENDAR_CONFIGURATION
AS
PROCEDURE CREATE_WEEK_DAY_DEFINITION(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_WEEK_DAY_DEFINITION;
PROCEDURE CHANGE_WEEK_DAY_DEFINITION(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_WEEK_DAY_DEFINITION;
PROCEDURE DELETE_WEEK_DAY_DEFINITION(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_WEEK_DAY_DEFINITION;
PROCEDURE CREATE_SPECIAL_DAY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_SPECIAL_DAY;
PROCEDURE CHANGE_SPECIAL_DAY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_SPECIAL_DAY;
PROCEDURE DELETE_SPECIAL_DAY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_SPECIAL_DAY;
PROCEDURE CREATE_TYPE_OF_DAY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_TYPE_OF_DAY;
PROCEDURE CHANGE_TYPE_OF_DAY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_TYPE_OF_DAY;
PROCEDURE DELETE_TYPE_OF_DAY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_TYPE_OF_DAY;
END NGAA_CALENDAR_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_UC_CONF
AS
  PROCEDURE CREATE_USAGE_CONTROL(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_USAGE_CONTROL(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_USAGE_CONTROL(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_UC_BOLT_ASSO_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_UC_BOLT_ASSO_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_UC_BOLT_ASSO_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_UC_APPLI_COND_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_UC_APPLI_COND_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_UC_APPLI_COND_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_UC_TPLAN_DEF_UC_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_UC_TPLAN_DEF_UC_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_UC_TPLAN_DEF_UC_SPEC(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_UC_CONF;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_UC_CONF
AS
PROCEDURE CREATE_USAGE_CONTROL(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_USAGE_CONTROL;
PROCEDURE CHANGE_USAGE_CONTROL(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_USAGE_CONTROL;
PROCEDURE DELETE_USAGE_CONTROL(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_USAGE_CONTROL;
PROCEDURE CREATE_UC_BOLT_ASSO_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_UC_BOLT_ASSO_SPEC;
PROCEDURE CHANGE_UC_BOLT_ASSO_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_UC_BOLT_ASSO_SPEC;
PROCEDURE DELETE_UC_BOLT_ASSO_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_UC_BOLT_ASSO_SPEC;
PROCEDURE CREATE_UC_APPLI_COND_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_UC_APPLI_COND_SPEC;
PROCEDURE CHANGE_UC_APPLI_COND_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_UC_APPLI_COND_SPEC;
PROCEDURE DELETE_UC_APPLI_COND_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_UC_APPLI_COND_SPEC;
PROCEDURE CREATE_UC_TPLAN_DEF_UC_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_UC_TPLAN_DEF_UC_SPEC;
PROCEDURE CHANGE_UC_TPLAN_DEF_UC_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_UC_TPLAN_DEF_UC_SPEC;
PROCEDURE DELETE_UC_TPLAN_DEF_UC_SPEC(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_UC_TPLAN_DEF_UC_SPEC;
END NGAA_UC_CONF;
/
CREATE OR REPLACE
PACKAGE NGAA_USER_NOTIFICATION_CONF
AS
  PROCEDURE CREATE_MESSAGE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_MESSAGE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_MESSAGE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_USER_NOTIFICATION_CONF;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_USER_NOTIFICATION_CONF
AS
PROCEDURE CREATE_MESSAGE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_MESSAGE;
PROCEDURE CHANGE_MESSAGE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_MESSAGE;
PROCEDURE DELETE_MESSAGE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_MESSAGE;
END NGAA_USER_NOTIFICATION_CONF;
/
CREATE OR REPLACE
PACKAGE NGAA_LIFE_CYCLE_CONFIGURATION
AS
END NGAA_LIFE_CYCLE_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_LIFE_CYCLE_CONFIGURATION
AS
END NGAA_LIFE_CYCLE_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_NUMBERING_CONFIGURATION
AS
  PROCEDURE CREATE_NPI(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_NPI(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_NPI(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_TON(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_TON(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_TON(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_DESTINATION_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_DESTINATION_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_DESTINATION_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE SET_FREE_AND_BARRED_DEST(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_DESTINATION_SUBTYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_DESTINATION_SUBTYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_DESTINATION_SUBTYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_CONTENT_SERVICE_PROV(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_CONTENT_SERVICE_PROV(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_CONTENT_SERVICE_PROV(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_CONTENT_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_CONTENT_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_CONTENT_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_CONTENT_ID(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_CONTENT_ID(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_CONTENT_ID(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_APN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_APN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_APN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_RATING_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_RATING_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_RATING_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_SERVICE_ID(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_SERVICE_ID(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_SERVICE_ID(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_VOICEMESSAGE_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_VOICEMESSAGE_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_VOICEMESSAGE_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_CONTENT_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_CONTENT_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_CONTENT_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_DATA_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_DATA_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_DATA_NUMBERING(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_TRANSFORMATION_RULES(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_REGION(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_REGION(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_REGION(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_STATE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_STATE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_STATE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_CITY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_CITY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_CITY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_RIN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_RIN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_RIN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_LONG_DISTANCE_OPERATOR(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_LONG_DISTANCE_OPERATOR(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_LONG_DISTANCE_OPERATOR(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_TIME_ZONE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_TIME_ZONE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_TIME_ZONE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_NUMBERING_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_NUMBERING_CONFIGURATION
AS
PROCEDURE CREATE_NPI(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_NPI;
PROCEDURE CHANGE_NPI(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_NPI;
PROCEDURE DELETE_NPI(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_NPI;
PROCEDURE CREATE_TON(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_TON;
PROCEDURE CHANGE_TON(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_TON;
PROCEDURE DELETE_TON(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_TON;
PROCEDURE CREATE_DESTINATION_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_DESTINATION_TYPE;
PROCEDURE CHANGE_DESTINATION_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_DESTINATION_TYPE;
PROCEDURE DELETE_DESTINATION_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_DESTINATION_TYPE;
PROCEDURE SET_FREE_AND_BARRED_DEST(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END SET_FREE_AND_BARRED_DEST;
PROCEDURE CREATE_DESTINATION_SUBTYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_DESTINATION_SUBTYPE;
PROCEDURE CHANGE_DESTINATION_SUBTYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_DESTINATION_SUBTYPE;
PROCEDURE DELETE_DESTINATION_SUBTYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_DESTINATION_SUBTYPE;
PROCEDURE CREATE_CONTENT_SERVICE_PROV(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_CONTENT_SERVICE_PROV;
PROCEDURE CHANGE_CONTENT_SERVICE_PROV(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_CONTENT_SERVICE_PROV;
PROCEDURE DELETE_CONTENT_SERVICE_PROV(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_CONTENT_SERVICE_PROV;
PROCEDURE CREATE_CONTENT_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_CONTENT_TYPE;
PROCEDURE CHANGE_CONTENT_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_CONTENT_TYPE;
PROCEDURE DELETE_CONTENT_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_CONTENT_TYPE;
PROCEDURE CREATE_CONTENT_ID(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_CONTENT_ID;
PROCEDURE CHANGE_CONTENT_ID(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_CONTENT_ID;
PROCEDURE DELETE_CONTENT_ID(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_CONTENT_ID;
PROCEDURE CREATE_APN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_APN;
PROCEDURE CHANGE_APN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_APN;
PROCEDURE DELETE_APN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_APN;
PROCEDURE CREATE_RATING_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_RATING_GROUP;
PROCEDURE CHANGE_RATING_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_RATING_GROUP;
PROCEDURE DELETE_RATING_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_RATING_GROUP;
PROCEDURE CREATE_SERVICE_ID(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_SERVICE_ID;
PROCEDURE CHANGE_SERVICE_ID(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_SERVICE_ID;
PROCEDURE DELETE_SERVICE_ID(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_SERVICE_ID;
PROCEDURE CREATE_VOICEMESSAGE_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_VOICEMESSAGE_NUMBERING;
PROCEDURE CHANGE_VOICEMESSAGE_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_VOICEMESSAGE_NUMBERING;
PROCEDURE DELETE_VOICEMESSAGE_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_VOICEMESSAGE_NUMBERING;
PROCEDURE CREATE_CONTENT_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_CONTENT_NUMBERING;
PROCEDURE CHANGE_CONTENT_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_CONTENT_NUMBERING;
PROCEDURE DELETE_CONTENT_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_CONTENT_NUMBERING;
PROCEDURE CREATE_DATA_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_DATA_NUMBERING;
PROCEDURE CHANGE_DATA_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_DATA_NUMBERING;
PROCEDURE DELETE_DATA_NUMBERING(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_DATA_NUMBERING;
PROCEDURE CHANGE_TRANSFORMATION_RULES(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_TRANSFORMATION_RULES;
PROCEDURE CREATE_REGION(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_REGION;
PROCEDURE CHANGE_REGION(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_REGION;
PROCEDURE DELETE_REGION(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_REGION;
PROCEDURE CREATE_STATE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_STATE;
PROCEDURE CHANGE_STATE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_STATE;
PROCEDURE DELETE_STATE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_STATE;
PROCEDURE CREATE_CITY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_CITY;
PROCEDURE CHANGE_CITY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_CITY;
PROCEDURE DELETE_CITY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_CITY;
PROCEDURE CREATE_RIN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_RIN;
PROCEDURE CHANGE_RIN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_RIN;
PROCEDURE DELETE_RIN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_RIN;
PROCEDURE CREATE_LONG_DISTANCE_OPERATOR(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_LONG_DISTANCE_OPERATOR;
PROCEDURE CHANGE_LONG_DISTANCE_OPERATOR(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_LONG_DISTANCE_OPERATOR;
PROCEDURE DELETE_LONG_DISTANCE_OPERATOR(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_LONG_DISTANCE_OPERATOR;
PROCEDURE CREATE_TIME_ZONE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_TIME_ZONE;
PROCEDURE CHANGE_TIME_ZONE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_TIME_ZONE;
PROCEDURE DELETE_TIME_ZONE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_TIME_ZONE;
END NGAA_NUMBERING_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_CYCLIC_ACTIONS_CONF
AS
END NGAA_CYCLIC_ACTIONS_CONF;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_CYCLIC_ACTIONS_CONF
AS
END NGAA_CYCLIC_ACTIONS_CONF;
/
CREATE OR REPLACE
PACKAGE NGAA_TARIFFPLAN_CONFIGURATION
AS
  PROCEDURE CREATE_TARIFF_PLAN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE UPDATE_TARIFF_PLAN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_TARIFF_PLAN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_TARIFFPLAN_CONFIGURATION
AS
PROCEDURE CREATE_TARIFF_PLAN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_TARIFF_PLAN;
PROCEDURE UPDATE_TARIFF_PLAN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END UPDATE_TARIFF_PLAN;
PROCEDURE DELETE_TARIFF_PLAN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_TARIFF_PLAN;
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_TARIFFPLAN_CONFIGURATION
AS
  PROCEDURE CREATE_TARIFF_PLAN_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE UPDATE_TARIFF_PLAN_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_TARIFF_PLAN_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_TARIFFPLAN_CONFIGURATION
AS
PROCEDURE CREATE_TARIFF_PLAN_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_TARIFF_PLAN_GROUP;
PROCEDURE UPDATE_TARIFF_PLAN_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END UPDATE_TARIFF_PLAN_GROUP;
PROCEDURE DELETE_TARIFF_PLAN_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_TARIFF_PLAN_GROUP;
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_TARIFFPLAN_CONFIGURATION
AS
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_TARIFFPLAN_CONFIGURATION
AS
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_TARIFFPLAN_CONFIGURATION
AS
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_TARIFFPLAN_CONFIGURATION
AS
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_TARIFFPLAN_CONFIGURATION
AS
  PROCEDURE CREATE_SERVICE_TARIFF_PLAN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE UPDATE_SERVICE_TARIFF_PLAN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_SERVICE_TARIFF_PLAN(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_TARIFFPLAN_CONFIGURATION
AS
PROCEDURE CREATE_SERVICE_TARIFF_PLAN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_SERVICE_TARIFF_PLAN;
PROCEDURE UPDATE_SERVICE_TARIFF_PLAN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END UPDATE_SERVICE_TARIFF_PLAN;
PROCEDURE DELETE_SERVICE_TARIFF_PLAN(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_SERVICE_TARIFF_PLAN;
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_TARIFFPLAN_CONFIGURATION
AS
  PROCEDURE CREATE_SERVICETARIFFPLANGROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE UPDATE_SERVICETARIFFPLANGROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_SERVICETARIFFPLANGROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_BOLT_ON_TYPE_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE UPDATE_BOLT_ON_TYPE_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_BOLT_ON_TYPE_GROUP(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_SET_OF_WALLET(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE UPDATE_SET_OF_WALLET(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_SET_OF_WALLET(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_SET_OF_BOLT_ON_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE UPDATE_SET_OF_BOLT_ON_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_SET_OF_BOLT_ON_TYPE(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_TARIFFPLAN_CONFIGURATION
AS
PROCEDURE CREATE_SERVICETARIFFPLANGROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_SERVICETARIFFPLANGROUP;
PROCEDURE UPDATE_SERVICETARIFFPLANGROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END UPDATE_SERVICETARIFFPLANGROUP;
PROCEDURE DELETE_SERVICETARIFFPLANGROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_SERVICETARIFFPLANGROUP;
PROCEDURE CREATE_BOLT_ON_TYPE_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_BOLT_ON_TYPE_GROUP;
PROCEDURE UPDATE_BOLT_ON_TYPE_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END UPDATE_BOLT_ON_TYPE_GROUP;
PROCEDURE DELETE_BOLT_ON_TYPE_GROUP(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_BOLT_ON_TYPE_GROUP;
PROCEDURE CREATE_SET_OF_WALLET(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_SET_OF_WALLET;
PROCEDURE UPDATE_SET_OF_WALLET(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END UPDATE_SET_OF_WALLET;
PROCEDURE DELETE_SET_OF_WALLET(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_SET_OF_WALLET;
PROCEDURE CREATE_SET_OF_BOLT_ON_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_SET_OF_BOLT_ON_TYPE;
PROCEDURE UPDATE_SET_OF_BOLT_ON_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END UPDATE_SET_OF_BOLT_ON_TYPE;
PROCEDURE DELETE_SET_OF_BOLT_ON_TYPE(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_SET_OF_BOLT_ON_TYPE;
END NGAA_TARIFFPLAN_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_RATE_CONFIGURATION
AS
  PROCEDURE CREATE_TARIFF_CLASS(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_TARIFF_CLASS(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE DELETE_TARIFF_CLASS(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_RATE_CONFIGURATION ;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_RATE_CONFIGURATION
AS
PROCEDURE CREATE_TARIFF_CLASS(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_TARIFF_CLASS;
PROCEDURE CHANGE_TARIFF_CLASS(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_TARIFF_CLASS;
PROCEDURE DELETE_TARIFF_CLASS(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END DELETE_TARIFF_CLASS;
END NGAA_RATE_CONFIGURATION ;
/
CREATE OR REPLACE
PACKAGE NGAA_RATE_CONFIGURATION
AS
  PROCEDURE CREATE_RATES(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_RATES(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CREATE_CURRENCY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
  PROCEDURE CHANGE_CURRENCY(
      XML_CLOB IN CLOB,
      RESULT_CODE OUT NUMBER,
      RESULT_TEXT OUT VARCHAR2);
END NGAA_RATE_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_RATE_CONFIGURATION
AS
PROCEDURE CREATE_RATES(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_RATES;
PROCEDURE CHANGE_RATES(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_RATES;
PROCEDURE CREATE_CURRENCY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CREATE_CURRENCY;
PROCEDURE CHANGE_CURRENCY(
    XML_CLOB IN CLOB,
    RESULT_CODE OUT NUMBER,
    RESULT_TEXT OUT VARCHAR2)
AS
BEGIN
  RESULT_CODE := 0;
  RESULT_TEXT := '<XML><SERVICE ID=''RE_SERV_ID''><TABLE>RE_TABLE_NAME</TABLE></SERVICE></XML>';
END CHANGE_CURRENCY;
END NGAA_RATE_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_OPERATION_CONFIGURATION
AS
END NGAA_OPERATION_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_OPERATION_CONFIGURATION
AS
END NGAA_OPERATION_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE NGAA_PROMOTION_CONFIGURATION
AS
END NGAA_PROMOTION_CONFIGURATION;
/
CREATE OR REPLACE
PACKAGE BODY NGAA_PROMOTION_CONFIGURATION
AS
END NGAA_PROMOTION_CONFIGURATION;
/
